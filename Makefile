# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=release_x86
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
PCH = include/crpch.hpp
PCH_PLACEHOLDER = $(OBJDIR)/$(notdir $(PCH))
GCH = $(PCH_PLACEHOLDER).gch
INCLUDES += -Iexternal/bgfx/include -Iexternal/bx/include -Iexternal/glfw/include -Iexternal/bimg/include -Iexternal/imgui -Iexternal/glm -Iexternal/stb -Iinclude
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),release_x86)
TARGETDIR = ../bin/Release-windows-x86/core
TARGET = $(TARGETDIR)/core.lib
OBJDIR = ../bin-int/Release-windows-x86/core
DEFINES += -DNDEBUG -DBX_CONFIG_DEBUG=0
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O3
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -std=c++17 -fno-exceptions -fno-rtti
LIBS += external/bgfx/bin/x86/Release/bgfx.lib external/bimg/bin/x86/Release/bimg.lib external/bx/bin/x86/Release/bx.lib external/glfw/bin/x86/Release/glfw.lib external/imgui/bin/x86/Release/imgui.lib -lgdi32 -lkernel32 -lpsapi
LDDEPS += external/bgfx/bin/x86/Release/bgfx.lib external/bimg/bin/x86/Release/bimg.lib external/bx/bin/x86/Release/bx.lib external/glfw/bin/x86/Release/glfw.lib external/imgui/bin/x86/Release/imgui.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32 -s

else ifeq ($(config),release_x86_64)
TARGETDIR = ../bin/Release-windows-x86_64/core
TARGET = $(TARGETDIR)/core.lib
OBJDIR = ../bin-int/Release-windows-x86_64/core
DEFINES += -DNDEBUG -DBX_CONFIG_DEBUG=0
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++17 -fno-exceptions -fno-rtti
LIBS += external/bgfx/bin/x86_64/Release/bgfx.lib external/bimg/bin/x86_64/Release/bimg.lib external/bx/bin/x86_64/Release/bx.lib external/glfw/bin/x86_64/Release/glfw.lib external/imgui/bin/x86_64/Release/imgui.lib -lgdi32 -lkernel32 -lpsapi
LDDEPS += external/bgfx/bin/x86_64/Release/bgfx.lib external/bimg/bin/x86_64/Release/bimg.lib external/bx/bin/x86_64/Release/bx.lib external/glfw/bin/x86_64/Release/glfw.lib external/imgui/bin/x86_64/Release/imgui.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else ifeq ($(config),debug_x86)
TARGETDIR = ../bin/Debug-windows-x86/core
TARGET = $(TARGETDIR)/core.lib
OBJDIR = ../bin-int/Debug-windows-x86/core
DEFINES += -D_DEBUG -DBX_CONFIG_DEBUG=1
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -Og -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -Og -g -std=c++17 -fno-exceptions -fno-rtti
LIBS += external/bgfx/bin/x86/Debug/bgfx.lib external/bimg/bin/x86/Debug/bimg.lib external/bx/bin/x86/Debug/bx.lib external/glfw/bin/x86/Debug/glfw.lib external/imgui/bin/x86/Debug/imgui.lib -lgdi32 -lkernel32 -lpsapi
LDDEPS += external/bgfx/bin/x86/Debug/bgfx.lib external/bimg/bin/x86/Debug/bimg.lib external/bx/bin/x86/Debug/bx.lib external/glfw/bin/x86/Debug/glfw.lib external/imgui/bin/x86/Debug/imgui.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32

else ifeq ($(config),debug_x86_64)
TARGETDIR = ../bin/Debug-windows-x86_64/core
TARGET = $(TARGETDIR)/core.lib
OBJDIR = ../bin-int/Debug-windows-x86_64/core
DEFINES += -D_DEBUG -DBX_CONFIG_DEBUG=1
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -Og -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -Og -g -std=c++17 -fno-exceptions -fno-rtti
LIBS += external/bgfx/bin/x86_64/Debug/bgfx.lib external/bimg/bin/x86_64/Debug/bimg.lib external/bx/bin/x86_64/Debug/bx.lib external/glfw/bin/x86_64/Debug/glfw.lib external/imgui/bin/x86_64/Debug/imgui.lib -lgdi32 -lkernel32 -lpsapi
LDDEPS += external/bgfx/bin/x86_64/Debug/bgfx.lib external/bimg/bin/x86_64/Debug/bimg.lib external/bx/bin/x86_64/Debug/bx.lib external/glfw/bin/x86_64/Debug/glfw.lib external/imgui/bin/x86_64/Debug/imgui.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else
  $(error "invalid configuration $(config)")
endif

# Per File Configurations
# #############################################


# File sets
# #############################################

OBJECTS :=

OBJECTS += $(OBJDIR)/app.o
OBJECTS += $(OBJDIR)/app_event.o
OBJECTS += $(OBJDIR)/batch.o
OBJECTS += $(OBJDIR)/callback_bgfx.o
OBJECTS += $(OBJDIR)/camera.o
OBJECTS += $(OBJDIR)/crpch.o
OBJECTS += $(OBJDIR)/debug.o
OBJECTS += $(OBJDIR)/debug_draw.o
OBJECTS += $(OBJDIR)/event.o
OBJECTS += $(OBJDIR)/imgui.o
OBJECTS += $(OBJDIR)/imgui_layer.o
OBJECTS += $(OBJDIR)/key_event.o
OBJECTS += $(OBJDIR)/layer.o
OBJECTS += $(OBJDIR)/layer_stack.o
OBJECTS += $(OBJDIR)/material.o
OBJECTS += $(OBJDIR)/math.o
OBJECTS += $(OBJDIR)/mesh.o
OBJECTS += $(OBJDIR)/mouse_event.o
OBJECTS += $(OBJDIR)/primitive.o
OBJECTS += $(OBJDIR)/renderer.o
OBJECTS += $(OBJDIR)/shader.o
OBJECTS += $(OBJDIR)/stb_image.o
OBJECTS += $(OBJDIR)/texture.o
OBJECTS += $(OBJDIR)/transform.o
OBJECTS += $(OBJDIR)/utils.o
OBJECTS += $(OBJDIR)/vertex.o
OBJECTS += $(OBJDIR)/vertex_array.o
OBJECTS += $(OBJDIR)/window.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking core
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning core
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/app.o: src/app/app.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/window.o: src/app/window.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/crpch.o: src/crpch.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/debug.o: src/debug.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/debug_draw.o: src/debug/debug_draw.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/app_event.o: src/event/app_event.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/event.o: src/event/event.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/key_event.o: src/event/key_event.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mouse_event.o: src/event/mouse_event.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/batch.o: src/graphics/batch.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/camera.o: src/graphics/camera.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/material.o: src/graphics/material.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/renderer.o: src/graphics/renderer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/shader.o: src/graphics/shader.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/texture.o: src/graphics/texture.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vertex_array.o: src/graphics/vertex_array.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/callback_bgfx.o: src/impl_bgfx/callback_bgfx.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/imgui.o: src/impl_imgui/imgui.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stb_image.o: src/impl_stb/stb_image.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/layer.o: src/layer/layer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/layer_stack.o: src/layer/layer_stack.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/imgui_layer.o: src/layer/layers/imgui_layer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/math.o: src/math.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/transform.o: src/math/transform.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mesh.o: src/primitive/mesh.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/primitive.o: src/primitive/primitive.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vertex.o: src/primitive/vertex.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/utils.o: src/utils.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif